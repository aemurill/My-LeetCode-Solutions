/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 *
 * Based on neelambuj2's solution.
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(!l1) return l2;
        if(!l2) return l1;
        ListNode* head = new ListNode(NULL);
        mTLHelper(l1, l2, head);
        return head->next;
    }
    
    void mTLHelper(ListNode* l1, ListNode* l2, ListNode* curr){
        printList(l1, l2);
        if(l1 && l2){
            if(l1->val <= l2->val){
                curr->next = l1;
                curr = curr->next;
                l1 = l1->next;
            }else{
                curr->next = l2;
                curr = curr->next;
                l2 = l2->next;
            }
            if(l1) curr->next = l1;
            else curr->next = l2;
            mTLHelper(l1, l2, curr);
        } 
    }
    
    void printList(ListNode* l1, ListNode* l2){
        cout << "-----------" << endl;
        cout << "L1\tL2" << endl;     
        pLHelper(l1, l2);
        cout << "====" << endl;
    }
    
    void pLHelper(ListNode* l1, ListNode* l2){
        if(l1 && l2){   
            cout << l1->val << "\t" << l2->val << endl;
            pLHelper(l1->next, l2->next);
        }
        else if(!l1 && l2){
            cout << "NULL\t" << l2->val << endl;
            pLHelper(NULL, l2->next);
        }else if (l1 && !l2){
            cout << l1->val << "\tNULL" << endl;
            pLHelper(l1->next, NULL);
        }else cout << "NULL\tNULL" << endl;
    }
};
