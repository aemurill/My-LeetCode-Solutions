/*
You are climbing a stair case. It takes n steps to reach to the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

Note: Given n will be a positive integer.
*/

class Solution {
/**
    Climbing stairs is always about climbing a static N steps by taking 1 or 2 steps.
    The total # of ways to reach step N is the sum of the ways to reach step N-1 & step N-2, because we must take 1 or 2 steps from them to reach N (respectively).
    aka this is a fibonacci series problem.
*/
public:
    vector<int> data{vector<int>(100,-1)};
    int value = 0;
    
    int climbStairs(int n) {
        if(data[n] != -1){
            return data[n];
        }   
        if(n == 1) return 1;
        if(n == 2) return 2;
        value = climbStairs(n - 1) + climbStairs(n - 2);
        data[n] = value;
        return value;
    }
};
