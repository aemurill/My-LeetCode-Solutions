/*
Complexity Analysis

    Time complexity : O(n). Single loop upto n is required to calculate nth fibonacci number.

    Space complexity : O(1). Constant space is used. 
*/

class Solution {
/**
    Climbing stairs is always about climbing a static N steps by taking 1 or 2 steps.
    The total # of ways to reach step N is the sum of the ways to reach step N-1 & step N-2, because we must take 1 or 2 steps from them to reach N (respectively).
    aka this is a fibonacci series problem.
*/
public:
    int climbStairs(int n) {
        if(n < 1) return 0;
        if(n == 1) return 1;
        //if(n == 2) return 2;
        //f(x=3+) = f(x-1) + f(x-2)
        int xSub1 = 2; //f(x-1)
        int xSub2 = 1; //f(x-2)
        int temp = 0;  //hold f(x-1)
        for(int i = 3; i <= n; i++){
            temp = xSub1;
            xSub1 = xSub1 + xSub2;
            xSub2 = temp;
        }
        return xSub1;
    }
};
